/*
 * Ejemplo desarrollado por Erick Navro
 * Blog: e-navro.blogspot.com
 * Julio - 2018
 */

package Analizadores; 
import java_cup.runtime.*;
import Estructuras.*;
import compi1.*;
import java.util.ArrayList;
parser code 
{:
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
:} 


terminal String CADENA, CHAREX, LLAVE1, LLAVE2, DOSPTS, GUION, FLECHA, MAYORQUE, PTYCOMA;
terminal String PUNTO, OR, PERCENT, MAS, KLEENE, INTERROGACION, RCONJ;
terminal String COMA, IDENTIFICADOR, DIGITO, LETRA, CARACTER, RANGO1, RANGO2, RANGO3, RANGO4, ESPECIAL;

non terminal CONJUNTO, CONTENIDOCONJ, PARTE1, PARTE2, VALIDACION, INICIO ;
non terminal nodoArbol EXPRESION;
non terminal String REGEX, LISTA;

start with INICIO;

INICIO::=LLAVE1 PARTE1 PERCENT PERCENT PARTE2 LLAVE2;

PARTE1::=PARTE1 CONJUNTO
            |PARTE1 REGEX
            |CONJUNTO
            |REGEX    
            |error;

PARTE2::=PARTE2 VALIDACION
            |VALIDACION
            |error;

VALIDACION::= IDENTIFICADOR:v1 DOSPTS CADENA:v2 PTYCOMA {:RESULT=parser.cadenas.add(new Validacion(v1, v2));:};

REGEX::=IDENTIFICADOR:v1 FLECHA EXPRESION:v2 PTYCOMA {:parser.arboles.add(parser.nuevoArbol(v1, v2));contador=0;contadorH=1;:};

EXPRESION::= PUNTO EXPRESION:v1 EXPRESION:v2        {:RESULT=new nodoArbol(v1, v2, ".", parser.contador, parser.contadorH);contador++;:}
            |OR EXPRESION:v1 EXPRESION:v2       {:RESULT=new nodoArbol(v1, v2, "|", parser.contador, parser.contadorH);contador++;:}
            |MAS EXPRESION:v1                         {:RESULT=new nodoArbol(v1, null, "+", parser.contador, parser.contadorH);contador++;:}
            |KLEENE EXPRESION:v1                   {:RESULT=new nodoArbol(v1, null, "*", parser.contador, parser.contadorH);contador++;:}
            |INTERROGACION EXPRESION:v1                    {:RESULT=new nodoArbol(v1, null, "?", parser.contador, parser.contadorH);contador++;:}
            |CHAREX:v1                              {:RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;:}
            |DIGITO:v1                                   {:RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;:}
            |LLAVE1 IDENTIFICADOR:v1 LLAVE2                      {:RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;:}
            |ESPECIAL:v1                              {:RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;:};

CONJUNTO::= RCONJ DOSPTS IDENTIFICADOR:v1 FLECHA CONTENIDOCONJ PTYCOMA      {:RESULT=parser.nombresConj.add(v1);:}
        | RCONJ DOSPTS IDENTIFICADOR:v1 FLECHA LISTA:v2 PTYCOMA    {:RESULT=parser.listaConj.add(new Conjunto(v1, v2));:};

CONTENIDOCONJ::=RANGO1:v1              {:RESULT=parser.conjuntos.add(v1);:}
            |RANGO2:v1              {:RESULT=parser.conjuntos.add(v1);:}
            |RANGO3:v1              {:RESULT=parser.conjuntos.add(v1);:}
            |RANGO4:v1              {:RESULT=parser.conjuntos.add(v1);:};

LISTA::=LISTA:v1 COMA:v2 DIGITO:v3           {:RESULT=v1+v2+v3;:}
        |LISTA:v1 COMA:v2 LETRA:v3        {:RESULT=v1+v2+v3;:}
        |LISTA:v1 COMA:v2 CARACTER:v3          {:RESULT=v1+v2+v3;:}
        |LETRA:v1                             {:RESULT=v1;:}
        |DIGITO:v1                               {:RESULT=v1;:}
        |CARACTER:v1                               {:RESULT=v1;:};
