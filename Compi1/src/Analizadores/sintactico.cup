/*
 * Ejemplo desarrollado por Erick Navro
 * Blog: e-navro.blogspot.com
 * Julio - 2018
 */

package Analizadores; 
import java_cup.runtime.*;
import Estructuras.*;
import compi1.*;
import java.util.ArrayList;
parser code 
{:
    private ArrayList<Conjunto> conjuntos = new ArrayList<Conjunto>();
    private ArrayList<Arbol> arboles = new ArrayList<Arbol>();
    private ArrayList<Validacion> validaciones = new ArrayList<Validacion>();
    private int contador=0;
    private int numeroHoja=1;

    public ArrayList<Arbol> getArboles(){
        return arboles;
    };

    public ArrayList<Validacion> getValidaciones(){
        return validaciones;
    };

    public ArrayList<Conjunto> getConjuntos(){
        return conjuntos;
    };
    

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        compi1.interfaz.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    }; 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        compi1.interfaz.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    };  
:} 
 
terminal String LLAVE1, LLAVE2, COMILLAS, CADENA, CHAREX, CARACTER, ESPECIAL, ESPECIALCOMILLAS,DOSPTS, GUION, FLECHA, MAYORQUE, PTYCOMA;
terminal String PUNTO, OR, PERCENT, MAS, KLEENE, INTERROGACION, RCONJ;
terminal String COMA, IDENTIFICADOR, DIGITO, LETRA, RANGO1, RANGO2, RANGO3, RANGO4 ;

non terminal PARTE1, PARTE2, VALIDACION, INICIO,CONJUNTO ;
non terminal nodoArbol EXPRESION;
non terminal String REGEX, LISTADO,CONTENIDOCONJ;

start with INICIO;

INICIO::=LLAVE1 PARTE1 PERCENT PERCENT PARTE2 LLAVE2;

PARTE1::=PARTE1 CONJUNTO
            |PARTE1 REGEX
            |CONJUNTO
            |REGEX    
            |error;

PARTE2::=PARTE2 VALIDACION
            |VALIDACION
            |error;

CONJUNTO::= RCONJ DOSPTS IDENTIFICADOR:v1 FLECHA CONTENIDOCONJ:v2 PTYCOMA        {:RESULT=parser.conjuntos.add(new Conjunto(v1, v2));:}
         |RCONJ DOSPTS IDENTIFICADOR:v1 FLECHA LISTADO:v2 PTYCOMA             {:RESULT=parser.conjuntos.add(new Conjunto(v1, v2));:}
         |RCONJ DOSPTS IDENTIFICADOR:v1 GUION MAYORQUE CONTENIDOCONJ:v2 PTYCOMA        {:RESULT=parser.conjuntos.add(new Conjunto(v1, v2));:}
         |RCONJ DOSPTS IDENTIFICADOR:v1 GUION MAYORQUE LISTADO:v2 PTYCOMA             {:RESULT=parser.conjuntos.add(new Conjunto(v1, v2));:};

CONTENIDOCONJ::=RANGO1:v1           {:RESULT=v1;:}
            |RANGO2:v1              {:RESULT=v1;:}
            |RANGO3:v1              {:RESULT=v1;:}
            |RANGO4:v1              {:RESULT=v1;:};

LISTADO::=LISTADO:v1 COMA:v2 DIGITO:v3           {:RESULT=v1+v2+v3;:}
        |LISTADO:v1 COMA:v2 LETRA:v3             {:RESULT=v1+v2+v3;:}
        |LISTADO:v1 COMA:v2 CARACTER:v3          {:RESULT=v1+v2+v3;:}
        |LETRA:v1                                {:RESULT=v1;:}
        |DIGITO:v1                               {:RESULT=v1;:}
        |CARACTER:v1                             {:RESULT=v1;:}
        |ESPECIAL:v1                             {:RESULT=v1;:}
        |ESPECIALCOMILLAS:v1                     {:RESULT=v1;:}
        |GUION:v1                               {:RESULT=v1;:};
        

REGEX::=IDENTIFICADOR:v1 FLECHA EXPRESION:v2 PTYCOMA {:parser.arboles.add(new Arbol(v1, new nodoArbol( ".", v2, new nodoArbol( "#", null, null, contador, numeroHoja), contador+1, numeroHoja)));contador=0;numeroHoja=1;:}
       |IDENTIFICADOR:v1 GUION MAYORQUE EXPRESION:v2 PTYCOMA {:parser.arboles.add(new Arbol(v1, new nodoArbol( ".", v2, new nodoArbol( "#", null, null, contador, numeroHoja), contador+1, numeroHoja)));contador=0;numeroHoja=1;:};

EXPRESION::= PUNTO EXPRESION:v1 EXPRESION:v2        {:RESULT=new nodoArbol( ".", v1, v2, parser.contador, parser.numeroHoja);contador++;:}
            |OR EXPRESION:v1 EXPRESION:v2           {:RESULT=new nodoArbol( "|", v1, v2, parser.contador, parser.numeroHoja);contador++;:}
            |MAS EXPRESION:v1                       {:RESULT=new nodoArbol( "+", v1, null, parser.contador, parser.numeroHoja);contador++;:}
            |KLEENE EXPRESION:v1                    {:RESULT=new nodoArbol( "*", v1, null, parser.contador, parser.numeroHoja);contador++;:}
            |INTERROGACION EXPRESION:v1             {:RESULT=new nodoArbol( "?", v1, null, parser.contador, parser.numeroHoja);contador++;:}
            |CHAREX:v1                              {:RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;:}
            |DIGITO:v1                              {:RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;:}
            |LLAVE1 IDENTIFICADOR:v1 LLAVE2         {:RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;:}
            |ESPECIALCOMILLAS:v1                    {:RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;:}
            |ESPECIAL:v1                            {:RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;:};

VALIDACION::= IDENTIFICADOR:v1 DOSPTS CADENA:v2 PTYCOMA {:RESULT=parser.validaciones.add(new Validacion(v1, v2));:}
            |IDENTIFICADOR:v1 DOSPTS CHAREX:v2 PTYCOMA {:RESULT=parser.validaciones.add(new Validacion(v1, v2));:}
            |IDENTIFICADOR:v1 DOSPTS COMILLAS LETRA:v2 COMILLAS PTYCOMA {:RESULT=parser.validaciones.add(new Validacion(v1, v2));:};

