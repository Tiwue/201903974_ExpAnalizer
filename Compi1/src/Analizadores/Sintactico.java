
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Estructuras.*;
import compi1.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\005\010\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\006\010\000\002\006\010\000\002" +
    "\006\011\000\002\006\011\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\010\006\000\002\010" +
    "\007\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\007\003\000\002\004\006\000\002\004\006\000\002\004" +
    "\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\004\004\004\001\002\000\010\003\010\027" +
    "\007\031\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\014\072\001\002\000\010\023" +
    "\ufffb\027\ufffb\031\ufffb\001\002\000\006\015\041\016\040" +
    "\001\002\000\010\023\015\027\007\031\011\001\002\000" +
    "\010\023\ufffc\027\ufffc\031\ufffc\001\002\000\010\023\ufffd" +
    "\027\ufffd\031\ufffd\001\002\000\004\023\020\001\002\000" +
    "\010\023\ufffe\027\ufffe\031\ufffe\001\002\000\010\023\uffff" +
    "\027\uffff\031\uffff\001\002\000\006\003\021\031\024\001" +
    "\002\000\006\005\ufff8\031\ufff8\001\002\000\006\005\ufff9" +
    "\031\ufff9\001\002\000\006\005\037\031\024\001\002\000" +
    "\004\014\025\001\002\000\010\006\027\007\030\010\026" +
    "\001\002\000\004\020\035\001\002\000\004\033\032\001" +
    "\002\000\004\020\031\001\002\000\006\005\uffda\031\uffda" +
    "\001\002\000\004\006\033\001\002\000\004\020\034\001" +
    "\002\000\006\005\uffd8\031\uffd8\001\002\000\006\005\uffd9" +
    "\031\uffd9\001\002\000\006\005\ufffa\031\ufffa\001\002\000" +
    "\004\002\000\001\002\000\026\004\047\010\045\012\051" +
    "\013\052\021\044\022\054\024\050\025\046\026\055\032" +
    "\043\001\002\000\004\017\042\001\002\000\026\004\047" +
    "\010\045\012\051\013\052\021\044\022\054\024\050\025" +
    "\046\026\055\032\043\001\002\000\030\004\uffde\010\uffde" +
    "\012\uffde\013\uffde\020\uffde\021\uffde\022\uffde\024\uffde\025" +
    "\uffde\026\uffde\032\uffde\001\002\000\026\004\047\010\045" +
    "\012\051\013\052\021\044\022\054\024\050\025\046\026" +
    "\055\032\043\001\002\000\030\004\uffdf\010\uffdf\012\uffdf" +
    "\013\uffdf\020\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\032\uffdf\001\002\000\026\004\047\010\045\012\051" +
    "\013\052\021\044\022\054\024\050\025\046\026\055\032" +
    "\043\001\002\000\004\031\063\001\002\000\026\004\047" +
    "\010\045\012\051\013\052\021\044\022\054\024\050\025" +
    "\046\026\055\032\043\001\002\000\030\004\uffdb\010\uffdb" +
    "\012\uffdb\013\uffdb\020\uffdb\021\uffdb\022\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\032\uffdb\001\002\000\030\004\uffdc\010\uffdc" +
    "\012\uffdc\013\uffdc\020\uffdc\021\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\032\uffdc\001\002\000\004\020\061\001\002" +
    "\000\026\004\047\010\045\012\051\013\052\021\044\022" +
    "\054\024\050\025\046\026\055\032\043\001\002\000\026" +
    "\004\047\010\045\012\051\013\052\021\044\022\054\024" +
    "\050\025\046\026\055\032\043\001\002\000\030\004\uffe0" +
    "\010\uffe0\012\uffe0\013\uffe0\020\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\032\uffe0\001\002\000\026\004\047" +
    "\010\045\012\051\013\052\021\044\022\054\024\050\025" +
    "\046\026\055\032\043\001\002\000\030\004\uffe3\010\uffe3" +
    "\012\uffe3\013\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\032\uffe3\001\002\000\010\023\uffe5\027\uffe5" +
    "\031\uffe5\001\002\000\030\004\uffe2\010\uffe2\012\uffe2\013" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\032\uffe2\001\002\000\004\005\064\001\002\000\030\004" +
    "\uffdd\010\uffdd\012\uffdd\013\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\032\uffdd\001\002\000\030\004" +
    "\uffe1\010\uffe1\012\uffe1\013\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\032\uffe1\001\002\000\026\004" +
    "\047\010\045\012\051\013\052\021\044\022\054\024\050" +
    "\025\046\026\055\032\043\001\002\000\030\004\uffe4\010" +
    "\uffe4\012\uffe4\013\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\032\uffe4\001\002\000\004\020\071\001" +
    "\002\000\010\023\uffe6\027\uffe6\031\uffe6\001\002\000\004" +
    "\031\073\001\002\000\006\015\075\016\074\001\002\000" +
    "\026\011\110\012\105\013\106\015\104\032\100\033\101" +
    "\034\077\035\112\036\111\037\107\001\002\000\004\017" +
    "\076\001\002\000\026\011\110\012\105\013\106\015\104" +
    "\032\100\033\101\034\077\035\112\036\111\037\107\001" +
    "\002\000\004\020\ufff3\001\002\000\006\020\uffeb\030\uffeb" +
    "\001\002\000\006\020\uffec\030\uffec\001\002\000\004\020" +
    "\120\001\002\000\006\020\114\030\113\001\002\000\006" +
    "\020\uffe7\030\uffe7\001\002\000\006\020\uffe9\030\uffe9\001" +
    "\002\000\006\020\uffe8\030\uffe8\001\002\000\004\020\ufff0" +
    "\001\002\000\006\020\uffea\030\uffea\001\002\000\004\020" +
    "\ufff1\001\002\000\004\020\ufff2\001\002\000\010\011\116" +
    "\032\117\033\115\001\002\000\010\023\ufff4\027\ufff4\031" +
    "\ufff4\001\002\000\006\020\uffee\030\uffee\001\002\000\006" +
    "\020\uffed\030\uffed\001\002\000\006\020\uffef\030\uffef\001" +
    "\002\000\010\023\ufff5\027\ufff5\031\ufff5\001\002\000\004" +
    "\020\124\001\002\000\006\020\123\030\113\001\002\000" +
    "\010\023\ufff6\027\ufff6\031\ufff6\001\002\000\010\023\ufff7" +
    "\027\ufff7\031\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\004\005\004\001\001\000\010\002\011\006" +
    "\013\010\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\016\010\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\022\004\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\067\001\001\000" +
    "\002\001\001\000\004\007\052\001\001\000\002\001\001" +
    "\000\004\007\065\001\001\000\002\001\001\000\004\007" +
    "\064\001\001\000\002\001\001\000\004\007\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\056\001\001\000\004\007\055\001\001\000\002" +
    "\001\001\000\004\007\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\121\012\120\001" +
    "\001\000\002\001\001\000\006\011\102\012\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ArrayList<Conjunto> conjuntos = new ArrayList<Conjunto>();
    private ArrayList<Arbol> arboles = new ArrayList<Arbol>();
    private ArrayList<Validacion> validaciones = new ArrayList<Validacion>();
    private int contador=0;
    private int numeroHoja=1;

    public ArrayList<Arbol> getArboles(){
        return arboles;
    };

    public ArrayList<Validacion> getValidaciones(){
        return validaciones;
    };

    public ArrayList<Conjunto> getConjuntos(){
        return conjuntos;
    };
    

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        compi1.interfaz.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    }; 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        compi1.interfaz.errores.addError(new Estructuras.MiError(tipoError.SINTACTICO, "Se detectó un error sintáctico ("+s.value+")", s.left, s.right));
    };  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAVE1 PARTE1 PERCENT PERCENT PARTE2 LLAVE2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARTE1 ::= PARTE1 CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PARTE1 ::= PARTE1 REGEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PARTE1 ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARTE1 ::= REGEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARTE1 ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARTE2 ::= PARTE2 VALIDACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE2",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARTE2 ::= VALIDACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE2",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARTE2 ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE2",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONJUNTO ::= RCONJ DOSPTS IDENTIFICADOR FLECHA CONTENIDOCONJ PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.conjuntos.add(new Conjunto(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONJUNTO ::= RCONJ DOSPTS IDENTIFICADOR FLECHA LISTADO PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.conjuntos.add(new Conjunto(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONJUNTO ::= RCONJ DOSPTS IDENTIFICADOR GUION MAYORQUE CONTENIDOCONJ PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.conjuntos.add(new Conjunto(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONJUNTO ::= RCONJ DOSPTS IDENTIFICADOR GUION MAYORQUE LISTADO PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.conjuntos.add(new Conjunto(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTENIDOCONJ ::= RANGO1 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTENIDOCONJ ::= RANGO2 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTENIDOCONJ ::= RANGO3 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CONTENIDOCONJ ::= RANGO4 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTADO ::= LISTADO COMA DIGITO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTADO ::= LISTADO COMA LETRA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTADO ::= LISTADO COMA CARACTER 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTADO ::= LETRA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTADO ::= DIGITO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTADO ::= CARACTER 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTADO ::= ESPECIAL 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTADO ::= ESPECIALCOMILLAS 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTADO ::= GUION 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTADO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // REGEX ::= IDENTIFICADOR FLECHA EXPRESION PTYCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.arboles.add(new Arbol(v1, new nodoArbol( ".", v2, new nodoArbol( "#", null, null, contador, numeroHoja), contador+1, numeroHoja)));contador=0;numeroHoja=1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGEX",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REGEX ::= IDENTIFICADOR GUION MAYORQUE EXPRESION PTYCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.arboles.add(new Arbol(v1, new nodoArbol( ".", v2, new nodoArbol( "#", null, null, contador, numeroHoja), contador+1, numeroHoja)));contador=0;numeroHoja=1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGEX",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION ::= PUNTO EXPRESION EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol( ".", v1, v2, parser.contador, parser.numeroHoja);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION ::= OR EXPRESION EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol( "|", v1, v2, parser.contador, parser.numeroHoja);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION ::= MAS EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol( "+", v1, null, parser.contador, parser.numeroHoja);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION ::= KLEENE EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol( "*", v1, null, parser.contador, parser.numeroHoja);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION ::= INTERROGACION EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol( "?", v1, null, parser.contador, parser.numeroHoja);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION ::= CHAREX 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION ::= DIGITO 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION ::= LLAVE1 IDENTIFICADOR LLAVE2 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= ESPECIALCOMILLAS 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= ESPECIAL 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, null, parser.contador, parser.numeroHoja);contador++;numeroHoja++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALIDACION ::= IDENTIFICADOR DOSPTS CADENA PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.validaciones.add(new Validacion(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALIDACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VALIDACION ::= IDENTIFICADOR DOSPTS CHAREX PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.validaciones.add(new Validacion(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALIDACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VALIDACION ::= IDENTIFICADOR DOSPTS COMILLAS LETRA COMILLAS PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT=parser.validaciones.add(new Validacion(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALIDACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
