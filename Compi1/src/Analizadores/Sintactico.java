
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Estructuras.*;
import compi1.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\007\010\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\005\003\000" +
    "\002\005\003\000\002\006\006\000\002\011\006\000\002" +
    "\010\005\000\002\010\005\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\010\003\000\002\002\010\000" +
    "\002\002\010\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\006\004\001\002\000\010\003\010\023" +
    "\007\025\011\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\004\010\057\001\002\000\010\017" +
    "\ufffb\023\ufffb\025\ufffb\001\002\000\004\012\032\001\002" +
    "\000\010\017\015\023\007\025\011\001\002\000\010\017" +
    "\ufffc\023\ufffc\025\ufffc\001\002\000\010\017\ufffd\023\ufffd" +
    "\025\ufffd\001\002\000\004\017\020\001\002\000\010\017" +
    "\ufffe\023\ufffe\025\ufffe\001\002\000\010\017\uffff\023\uffff" +
    "\025\uffff\001\002\000\006\003\021\025\023\001\002\000" +
    "\006\007\ufff8\025\ufff8\001\002\000\006\007\ufff9\025\ufff9" +
    "\001\002\000\004\010\027\001\002\000\006\007\026\025" +
    "\023\001\002\000\006\007\ufffa\025\ufffa\001\002\000\004" +
    "\002\000\001\002\000\004\004\030\001\002\000\004\014" +
    "\031\001\002\000\006\007\ufff7\025\ufff7\001\002\000\024" +
    "\005\035\006\037\015\034\016\043\020\040\021\036\022" +
    "\044\026\033\035\041\001\002\000\026\005\uffef\006\uffef" +
    "\014\uffef\015\uffef\016\uffef\020\uffef\021\uffef\022\uffef\026" +
    "\uffef\035\uffef\001\002\000\024\005\035\006\037\015\034" +
    "\016\043\020\040\021\036\022\044\026\033\035\041\001" +
    "\002\000\026\005\ufff0\006\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\021\ufff0\022\ufff0\026\ufff0\035\ufff0\001\002\000" +
    "\024\005\035\006\037\015\034\016\043\020\040\021\036" +
    "\022\044\026\033\035\041\001\002\000\004\025\052\001" +
    "\002\000\024\005\035\006\037\015\034\016\043\020\040" +
    "\021\036\022\044\026\033\035\041\001\002\000\026\005" +
    "\uffed\006\uffed\014\uffed\015\uffed\016\uffed\020\uffed\021\uffed" +
    "\022\uffed\026\uffed\035\uffed\001\002\000\004\014\050\001" +
    "\002\000\024\005\035\006\037\015\034\016\043\020\040" +
    "\021\036\022\044\026\033\035\041\001\002\000\024\005" +
    "\035\006\037\015\034\016\043\020\040\021\036\022\044" +
    "\026\033\035\041\001\002\000\026\005\ufff1\006\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\020\ufff1\021\ufff1\022\ufff1\026\ufff1" +
    "\035\ufff1\001\002\000\024\005\035\006\037\015\034\016" +
    "\043\020\040\021\036\022\044\026\033\035\041\001\002" +
    "\000\026\005\ufff4\006\ufff4\014\ufff4\015\ufff4\016\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\026\ufff4\035\ufff4\001\002\000\010" +
    "\017\ufff6\023\ufff6\025\ufff6\001\002\000\026\005\ufff3\006" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\026\ufff3\035\ufff3\001\002\000\004\007\053\001\002\000" +
    "\026\005\uffee\006\uffee\014\uffee\015\uffee\016\uffee\020\uffee" +
    "\021\uffee\022\uffee\026\uffee\035\uffee\001\002\000\026\005" +
    "\ufff2\006\ufff2\014\ufff2\015\ufff2\016\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\026\ufff2\035\ufff2\001\002\000\024\005\035\006" +
    "\037\015\034\016\043\020\040\021\036\022\044\026\033" +
    "\035\041\001\002\000\026\005\ufff5\006\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\026\ufff5\035\ufff5" +
    "\001\002\000\004\025\060\001\002\000\004\012\061\001" +
    "\002\000\020\026\063\027\065\030\071\031\062\032\072" +
    "\033\070\034\067\001\002\000\004\014\uffea\001\002\000" +
    "\006\014\uffe2\024\uffe2\001\002\000\004\014\100\001\002" +
    "\000\006\014\uffe3\024\uffe3\001\002\000\006\014\074\024" +
    "\073\001\002\000\004\014\uffe7\001\002\000\004\014\uffe8" +
    "\001\002\000\006\014\uffe1\024\uffe1\001\002\000\004\014" +
    "\uffe9\001\002\000\010\026\076\027\075\030\077\001\002" +
    "\000\010\017\uffeb\023\uffeb\025\uffeb\001\002\000\006\014" +
    "\uffe5\024\uffe5\001\002\000\006\014\uffe6\024\uffe6\001\002" +
    "\000\006\014\uffe4\024\uffe4\001\002\000\010\017\uffec\023" +
    "\uffec\025\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\007\004\001\001\000\010\002\013\004" +
    "\011\011\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\016\011\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\023\006\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\041\001" +
    "\001\000\002\001\001\000\004\010\054\001\001\000\002" +
    "\001\001\000\004\010\053\001\001\000\002\001\001\000" +
    "\004\010\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\045\001\001\000\004\010\044\001\001\000" +
    "\002\001\001\000\004\010\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\063\012\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAVE1 PARTE1 PERCENT PERCENT PARTE2 LLAVE2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARTE1 ::= PARTE1 CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PARTE1 ::= PARTE1 REGEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PARTE1 ::= CONJUNTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARTE1 ::= REGEX 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PARTE1 ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PARTE2 ::= PARTE2 VALIDACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE2",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PARTE2 ::= VALIDACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE2",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARTE2 ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARTE2",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALIDACION ::= IDENTIFICADOR DOSPTS CADENA PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.cadenas.add(new Validacion(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALIDACION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // REGEX ::= IDENTIFICADOR FLECHA EXPRESION PTYCOMA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.arboles.add(parser.nuevoArbol(v1, v2));contador=0;contadorH=1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REGEX",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESION ::= PUNTO EXPRESION EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, v2, ".", parser.contador, parser.contadorH);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESION ::= OR EXPRESION EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v2 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, v2, "|", parser.contador, parser.contadorH);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESION ::= MAS EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, "+", parser.contador, parser.contadorH);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION ::= KLEENE EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, "*", parser.contador, parser.contadorH);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION ::= INTERROGACION EXPRESION 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		nodoArbol v1 = (nodoArbol)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(v1, null, "?", parser.contador, parser.contadorH);contador++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION ::= CHAREX 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= DIGITO 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= LLAVE1 IDENTIFICADOR LLAVE2 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= ESPECIAL 
            {
              nodoArbol RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new nodoArbol(null, null, v1, parser.contador, parser.contadorH);contador++;contadorH++;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CONJUNTO ::= RCONJ DOSPTS IDENTIFICADOR FLECHA CONTENIDOCONJ PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		RESULT=parser.nombresConj.add(v1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONJUNTO ::= RCONJ DOSPTS IDENTIFICADOR FLECHA LISTA PTYCOMA 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=parser.listaConj.add(new Conjunto(v1, v2));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDOCONJ ::= RANGO1 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=parser.conjuntos.add(v1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONTENIDOCONJ ::= RANGO2 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=parser.conjuntos.add(v1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONTENIDOCONJ ::= RANGO3 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=parser.conjuntos.add(v1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONTENIDOCONJ ::= RANGO4 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=parser.conjuntos.add(v1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOCONJ",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA ::= LISTA COMA DIGITO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA ::= LISTA COMA LETRA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA ::= LISTA COMA CARACTER 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1+v2+v3;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA ::= LETRA 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA ::= DIGITO 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA ::= CARACTER 
            {
              String RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=v1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
